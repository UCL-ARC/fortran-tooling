module test_calculate_mesh_parameters
   use, intrinsic :: iso_fortran_env
   use funit
   use mesh_generator
   implicit none
 
   ! test data types
   @testParameter
   type, extends(AbstractTestParameter) :: Test_CalculateMeshParameterCase_params
      real(kind=real64) :: edgeSize
      integer(kind=int64) :: boxSize, &
            expectedNumEdgesPerBoundary, &
            expectedNumNodes, &
            expectedNumBoundaryNodes, &
            expectedNumElements
   contains
      procedure :: toString => CalculateMeshParameterCase_toString
   end type Test_CalculateMeshParameterCase_params
 
   @TestCase(testParameters={getParameters()}, constructor=newTest)
   type, extends(ParameterizedTestCase) :: Test_CalculateMeshParameters_case
      real(kind=real64) :: edgeSize
      integer(kind=int64) :: boxSize, &
         expectedNumEdgesPerBoundary, &
         expectedNumNodes, &
         expectedNumBoundaryNodes, &
         expectedNumElements
   end type Test_CalculateMeshParameters_case
   !-------------------
 
contains
 
   ! Constructors
   function newTest(testParameter) result(tst)
      type (Test_CalculateMeshParameters_case) :: tst
      type (Test_CalculateMeshParameterCase_params), intent(in) :: testParameter

      real(kind=real64) :: edgeSize
      integer(kind=int64) :: boxSize, &
         expectedNumEdgesPerBoundary, &
         expectedNumNodes, &
         expectedNumBoundaryNodes, &
         expectedNumElements

      tst%edgeSize = testParameter%edgeSize
      tst%boxSize = testParameter%boxSize
      tst%expectedNumEdgesPerBoundary = testParameter%expectedNumEdgesPerBoundary
      tst%expectedNumNodes = testParameter%expectedNumNodes
      tst%expectedNumBoundaryNodes = testParameter%expectedNumBoundaryNodes
      tst%expectedNumElements = testParameter%expectedNumElements

   end function newTest
   !-------------------

   ! to strings
   function CalculateMeshParameterCase_toString(this) result(string)
      class (Test_CalculateMeshParameterCase_params), intent(in) :: this
      character(:), allocatable :: string

      character(len=80) :: buffer

      write(buffer,'("(edgeSize,boxSize)=(",i3,",",f4.1,")")') &
           this%boxSize, this%edgeSize
      string = trim(buffer)

   end function CalculateMeshParameterCase_toString
   !-------------------

   ! Define test parameter sets
   function getParameters() result(params)
      type (Test_CalculateMeshParameterCase_params), allocatable :: params(:)
 
      params = [ &
         & Test_CalculateMeshParameterCase_params(1.0_real64, 10_int64, 10_int64, 121_int64, 40_int64, 200_int64), &
         & Test_CalculateMeshParameterCase_params(0.2_real64, 5_int64, 25_int64, 676_int64, 100_int64, 1250_int64), &
         & Test_CalculateMeshParameterCase_params(3.0_real64, 100_int64, 33_int64, 1156_int64, 132_int64, 2178_int64) &
         & ]

   end function getParameters
   !-------------------
 
   ! Actual tests
   @Test
   subroutine testCalculateMeshParameters(this)
      implicit none
      class (Test_CalculateMeshParameters_case), intent(inout) :: this

      integer(kind=int64) :: actualNumEdgesPerBoundary, actualNumNodes, &
         actualNumBoundaryNodes, actualNumElements

      call calculate_mesh_parameters(this%boxSize, this%edgeSize, &
         actualNumEdgesPerBoundary, actualNumNodes, &
         actualNumBoundaryNodes, actualNumElements)

      @assertEqual(this%expectedNumEdgesPerBoundary, actualNumEdgesPerBoundary, "Unexpected actualNumEdgesPerBoundary")
      @assertEqual(this%expectedNumNodes, actualNumNodes, "Unexpected actualNumNodes")
      @assertEqual(this%expectedNumBoundaryNodes, actualNumBoundaryNodes, "Unexpected actualNumBoundaryNodes")
      @assertEqual(this%expectedNumElements, actualNumElements, "Unexpected actualNumElements")

   end subroutine testCalculateMeshParameters
   !-------------------
 
end module test_calculate_mesh_parameters
